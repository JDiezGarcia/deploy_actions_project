pipeline {
    agent any
    triggers {
        pollSCM('1 */3 * * *')
    }
    parameters {
        string(name: 'executor', description: 'What is your name?', defaultValue: 'System' )
        string(name: 'subject', description: 'Why are you executing the pipeline?', defaultValue: 'We detected a change in the repository')
        string(name: 'email', description: 'Put your email to recieve a notificiation with the results', defaultValue: 'fco.javier.diez.garcia@gmail.com')
    }
    stages {
        stage ('Checkout SCM') {
            steps {
                script {
                    STAGE_NAME = 'Checkout SCM'

                    checkout scm
                    result = sh (script: "git log -1 | grep '.*\\[ci skip\\].*'", returnStatus: true)
                    if (result == 0) {
                        echo ("'ci skip' spotted in git commit. Aborting.")
                        success ("'ci skip' spotted in git commit. Aborting.")
                    }
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    sh 'npm install'
                    env.lintResult = sh(script: 'npm run lint', returnStatus: true)
                }
            }
        }
        stage('Cypress') {
            steps {
                script {
                    sh 'apt-get install -y lsof ibgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb'
                    sh 'npm install cypress --save-dev'
                    sh 'npm run build && npm run start &'
                    env.cypressResult = sh(script: 'cypress run --headed', returnStatus: true)
                }
            }
        }
        stage('Badge and Deploy') {
            parallel {
                stage('Create Badge') {
                    steps {
                        script {
                            env.badgeResult = sh(script: "node jenkinsScripts/create_badge/dist/index.js ${env.cypressResult}", returnStatus: true)
                            sh 'git config user.email \'jdiez.actions@github.com\''
                            sh 'git config user.name \'JDiezActions\' '
                            withCredentials([string(credentialsId: 'TOKEN_GITHUB', variable: 'TOKEN')]) {
                                sh 'git remote set-url origin https://JDiezGarcia:${TOKEN}@github.com/JDiezGarcia/deploy_actions_project.git'
                            }
                            sh 'git add .'
                            sh 'git commit --allow-empty -m \'[ci skip] Readme\''
                            sh 'git push origin HEAD:jenkins'
                        }
                    }
                }
                stage('Deploy') {
                    when {
                        expression {
                            env.lintResult == "0" && env.cypressResult == "0"
                        }
                    }
                    steps {
                        sh 'npm install -g vercel'
                        script {
                            withCredentials([
                            string(credentialsId: 'VERCEL_ORG', variable: 'ORG_ID'),
                            string(credentialsId: 'VERCEL_TOKEN', variable: 'VERCEL'),
                            string(credentialsId: 'VERCEL_PROJECT', variable: 'PROJECT_ID')
                            ]) {
                                env.deployResult = sh(
                                    script: 'VERCEL_ORG_ID=${ORG_ID} VERCEL_PROJECT_ID=${PROJECT_ID} vercel --prod --scope jdiezgarcia --token=${VERCEL} .',
                                    returnStatus: true
                                )
                            }
                        }
                    }
                }
            }
        }
        stage('Send Email') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ORIGIN_EMAIL', variable: 'EMAIL_O'),
                        string(credentialsId: 'ORIGIN_PASS', variable: 'PASS_O'),
                    ]) {
                        env.emailDest = params.email
                        env.exectUser = params.executor
                        env.subjEmail = params.subject
                        env.emailResult = sh(
                            script: 'ORIGIN_E=${EMAIL_O} ORIGIN_P=${PASS_O} node jenkinsScripts/email_results/dist/index.js',
                            returnStatus: true
                        )
                    }
                }
            }
        }
        stage('Tweet Results') {
            steps {
                    script {
                        withCredentials([
                            string(credentialsId: 'ACCESS_KEY', variable: 'A_K'),
                            string(credentialsId: 'ACCESS_SECRET', variable: 'A_S'),
                            string(credentialsId: 'CONSUMER_KEY', variable: 'C_K'),
                            string(credentialsId: 'CONSUMER_SECRET', variable: 'C_S')
                        ]) {
                        sh 'A_KEY=${A_K} A_SECRET=${A_S} C_SECRET=${C_S} C_KEY=${C_K} node jenkinsScripts/tweet_results/dist/index.js'
                        }
                    }
            }
        }
    }
}
